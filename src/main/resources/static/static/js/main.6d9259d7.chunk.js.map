{"version":3,"sources":["services/authServices.js","store/auth/actionTypes.js","store/auth/reducer.js","services/userService.js","store/users/actionTypes.js","store/users/reducer.js","components/Home.js","store/users/actions.js","store/auth/actions.js","components/Login.js","App.js","registerServiceWorker.js","index.js"],"names":["username","password","fd","FormData","append","encodeURI","axios","url","method","headers","data","withCredentials","response","status","loggedIn","error","statusText","AUTH_ERROR","SERVER_ERROR","initialState","undefined","reduce","state","action","type","types","getLoginDetails","auth","query","console","log","users","allUsers","LOADED","reducer","actionTypes","getUsers","Home","props","handleLogout","bind","dispatch","getState","a","userService","authTypes","this","authService","logout","className","NavLink","to","onClick","Redirect","push","renderNavBar","columns","Header","accessor","width","defaultPageSize","React","Component","withRouter","connect","authSelectors","userSelectors","Login","submitted","usernameChange","passwordChange","handleSubmit","event","target","value","name","setState","preventDefault","login","authActiokns","onSubmit","placeholder","onChange","App","Route","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","reducers","applyMiddleware","thunk","ReactDOM","render","BrowserRouter","document","getElementById","URL","process","origin","addEventListener","fetch","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6d9259d7.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nclass AuthService {\r\n\r\n    async login(username, password) {\r\n        var fd = new FormData()\r\n        fd.append('j_username', encodeURI(username))\r\n        fd.append('j_password', encodeURI(password))\r\n\r\n        try {\r\n            const response = await axios({\r\n                url: '/auth',\r\n                method: 'post',\r\n                headers: {'Content-Type': 'application/x-www-form-urlencoded'},\r\n                data: fd,\r\n                withCredentials: true\r\n            });\r\n\r\n            if (response.status === 200) {\r\n                return { loggedIn: true, error:'', status: response.status }\r\n            } else {\r\n                return { loggedIn: false, error:response.error, status: response.status }\r\n            }\r\n        } catch (err) {\r\n            return { status: err.response.status, error: err.response.statusText }\r\n        }\r\n    }\r\n\r\n    async logout() {\r\n\r\n        try {\r\n            const response = await axios({\r\n                url: '/logout',\r\n                method: 'post',\r\n                headers: {'Content-Type': 'application/x-www-form-urlencoded'},\r\n                withCredentials: true\r\n            });\r\n\r\n            if (response.status === 200) {\r\n                return { loggedIn: true, error:'', status: response.status }\r\n            } else {\r\n                return { loggedIn: false, error:'', status: response.status }\r\n            }\r\n        } catch (err) {\r\n            return { status: err.response.status, error: err.response.statusText }\r\n        }\r\n    }\r\n}\r\n\r\nexport default new AuthService()","export const LOGGING_IN   = \"auth.LOGGING_IN\"\r\nexport const LOGGED_IN    = \"auth.LOGGED_IN\"\r\nexport const LOGGED_OUT   = \"auth.LOGGED_OUT\"\r\nexport const AUTH_ERROR   = \"auth.AUTH_ERROR\"\r\nexport const SERVER_ERROR = \"auth.SERVER_ERROR\"\r\n","\r\nimport * as types from './actionTypes'\r\n\r\nconst initialState = {\r\n    loggedIn: false,\r\n    username: undefined,\r\n    error: ''\r\n};\r\n\r\nexport default function reduce(state=initialState, action={}) {\r\n    switch (action.type) {\r\n        case types.LOGGED_IN:\r\n            return {loggedIn: true, username : action.username, error:''};\r\n        case types.LOGGING_IN:\r\n        case types.LOGGED_OUT:\r\n            return {loggedIn: false, username : undefined, error:''};\r\n        case types.AUTH_ERROR:\r\n            return {loggedIn: false, username : undefined, error:'Authentication Error'};\r\n        case types.SERVER_ERROR:\r\n            return {loggedIn: false, username : undefined, error:'Server Error'};\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function getLoginDetails(state) {\r\n    return {loggedIn: state.auth.loggedIn, username: state.auth.username, error: state.auth.error }\r\n}\r\n","import axios from 'axios'\r\nimport * as _ from 'lodash';\r\n\r\nclass UserService {\r\n\r\n    async getUsers() {\r\n        try {\r\n            const response = await axios({\r\n                url: '/graphql',\r\n                method: 'post',\r\n                data: {\r\n                    query: `\r\n                        query {\r\n                          allUsers {\r\n                            id\r\n                            firstName\r\n                            lastName\r\n                          }\r\n                        }                        \r\n                    `\r\n                },\r\n                withCredentials: true\r\n            });\r\n\r\n            console.log(response.data.data.users)\r\n\r\n            if (response.status === 200) {\r\n                return { users: response.data.data.allUsers, status: response.status }\r\n            } else {\r\n                return { loggedIn: false, error:response.error, status: response.status }\r\n            }\r\n        } catch (err) {\r\n            return { status: err.response.status, error: err.response.statusText }\r\n        }\r\n    }\r\n}\r\n\r\nexport default new UserService()\r\n","export const LOADING   = \"users.LOADING\"\r\nexport const LOADED    = \"users.LOADED\"\r\n","\r\nimport * as actionTypes from './actionTypes';\r\n\r\nconst initialState = {\r\n    users: []\r\n};\r\n\r\nexport default function reducer(state=initialState, action={}) {\r\n    switch (action.type) {\r\n        case actionTypes.LOADING:\r\n            return { users: [] }\r\n        case actionTypes.LOADED:\r\n            return { users: action.users }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport function getUsers(state) {\r\n    return { users : state.users.users }\r\n}\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport * as authActions from '../store/auth/actions';\r\nimport * as authSelectors from '../store/auth/reducer';\r\nimport * as userActions from '../store/users/actions';\r\nimport * as userSelectors from '../store/users/reducer';\r\nimport { withRouter, Redirect } from \"react-router\";\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport ReactTable from 'react-table';\r\nimport 'react-table/react-table.css';\r\n\r\nclass Home extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleLogout = this.handleLogout.bind(this)\r\n        this.props.dispatch(userActions.getUsers())\r\n    }\r\n\r\n    handleLogout() {\r\n        this.props.dispatch(authActions.logout())\r\n    }\r\n\r\n    renderNavBar() {\r\n        return (\r\n        <nav className=\"navbar navbar-expand-sm bg-dark navbar-dark sticky-top\">\r\n            <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item\">\r\n                    <NavLink className=\"nav-link\" to=\"/\">Home</NavLink>\r\n                </li>\r\n            </ul>\r\n            <ul className=\"navbar-nav ml-auto\">\r\n                <li className=\"nav-item\">\r\n                    <button className=\"btn btn-sm btn-danger\" onClick={this.handleLogout}>Logout</button>\r\n                </li>\r\n            </ul>\r\n        </nav>)\r\n    }\r\n\r\n    render() {\r\n       if (this.props.loggedIn === false) {\r\n           return <Redirect to=\"/login\" push/>\r\n       }\r\n\r\n        return (\r\n            <div>\r\n            {this.renderNavBar()}\r\n            <h2>Users</h2>\r\n                <div>\r\n                <ReactTable\r\n                    data={this.props.users}\r\n                    columns={\r\n                        [\r\n                            {Header: \"ID\", accessor: \"id\", width: 100},\r\n                            {Header: \"First Name\", accessor: \"firstName\"},\r\n                            {Header: \"Last Name\", accessor: \"lastName\"}\r\n                        ]\r\n                    }\r\n                    defaultPageSize={10}\r\n                    className=\"-striped -highlight\"\r\n                >\r\n                </ReactTable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        loggedIn : authSelectors.getLoginDetails(state).loggedIn,\r\n        users : userSelectors.getUsers(state).users\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(Home));\r\n","import userService from '../../services/userService';\r\nimport * as types from './actionTypes';\r\nimport * as authTypes from '../auth/actionTypes';\r\n\r\nexport function getUsers() {\r\n    return async (dispatch, getState) => {\r\n\r\n        dispatch({type: types.LOADING});\r\n\r\n        const { users, status } = await userService.getUsers();\r\n\r\n        switch (status) {\r\n            case 200:\r\n                dispatch({type: types.LOADED, users });\r\n                break;\r\n            case 401:\r\n                dispatch({type: authTypes.AUTH_ERROR, status });\r\n                break;\r\n            default:\r\n                dispatch({type: authTypes.SERVER_ERROR, status });\r\n        }\r\n    }\r\n}\r\n","import authService from '../../services/authServices'\r\nimport * as types from './actionTypes'\r\n\r\nexport function authenticate(username, password) {\r\n    return async(dispatch, getState) => {\r\n        dispatch({type: types.LOGGING_IN});\r\n\r\n        const { status, error } = await authService.login(username, password)\r\n\r\n        switch (status) {\r\n            case 200:\r\n                dispatch({type: types.LOGGED_IN, username });\r\n                break;\r\n            case 401:\r\n                dispatch({type: types.AUTH_ERROR, status, error });\r\n                break;\r\n            default:\r\n                dispatch({type: types.SERVER_ERROR, status, error });\r\n        }\r\n    }\r\n}\r\n\r\nexport function logout() {\r\n    return async (dispatch, getState) => {\r\n        const { status, error } = await authService.logout();\r\n\r\n        switch (status) {\r\n            case 200:\r\n                dispatch({type: types.LOGGED_OUT, username:undefined});\r\n                break;\r\n            case 401:\r\n                dispatch({type: types.AUTH_ERROR, status, error });\r\n                break;\r\n            default:\r\n                dispatch({type: types.SERVER_ERROR, status, error });\r\n        }\r\n    }\r\n}","import React from 'react'\r\nimport * as authSelectors from '../store/auth/reducer'\r\nimport * as authActiokns from '../store/auth/actions'\r\nimport { withRouter, Redirect } from \"react-router\";\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport './css/Login.css'\r\n\r\nclass Login extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            submitted: false\r\n        };\r\n        this.usernameChange = this.usernameChange.bind(this);\r\n        this.passwordChange = this.passwordChange.bind(this);\r\n        this.handleSubmit   = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    usernameChange(event) {\r\n        const { name, value } = event.target;\r\n        this.setState( {username: value});\r\n        this.setState( {submitted: false});\r\n    }\r\n\r\n    passwordChange(event) {\r\n        const { name, value } = event.target;\r\n        this.setState( {password: value});\r\n        this.setState( {submitted: false});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.setState( {submitted: true});\r\n        const { username, password } = this.state;\r\n        this.props.dispatch(authActiokns.authenticate(username, password));\r\n    }\r\n\r\n    render() {\r\n        if (this.props.loggedIn === true) {\r\n            return <Redirect to=\"/\" push/>\r\n        }\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <form className=\"form-signin\" onSubmit={this.handleSubmit}>\r\n                    <h2 className=\"form-signin-heading\">Please login</h2>\r\n                    <input placeholder=\"Use 'user1'\" type=\"text\" name=\"username\" onChange={this.usernameChange} className=\"form-control\"/>\r\n                    <input placeholder=\"Use 'password123'\" type=\"password\" name=\"password\" onChange={this.passwordChange} className=\"form-control\"/>\r\n                    <hr/>\r\n                    <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Login</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return authSelectors.getLoginDetails(state)\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(Login));\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Route } from 'react-router-dom'\r\nimport Home from './components/Home'\r\nimport Login from './components/Login'\r\nimport * as authSelectors from './store/auth/reducer'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n          <Route exact path=\"/\" component={Home}></Route>\r\n          <Route exact path=\"/login\" component={Login}></Route>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { loggedIn : authSelectors.getLoginDetails(state).loggedIn}\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(App));\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport thunk from 'redux-thunk'\r\nimport * as reducers from './store/reducers'\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(combineReducers(reducers), composeEnhancers(applyMiddleware(thunk)))\r\n\r\nReactDOM.render(<Provider store={store}>\r\n                    <BrowserRouter>\r\n                        <App />\r\n                    </BrowserRouter>\r\n                </Provider>\r\n    , document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}